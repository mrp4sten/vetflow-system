-- VetFlow - Test Baseline for H2
-- Scope: Owner / Patient / Appointment / MedicalRecord
-- Notas:
-- - BIGINT + IDENTITY para cuadrar con @Id Long
-- - Chequeos básicos usados en tests
-- - type quoted (palabra sensible)
-- - Enums de Appointment usan MAYÚSCULAS (SCHEDULED, etc.)

-----------------------------
-- OWNERS
-----------------------------
CREATE TABLE IF NOT EXISTS owners (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(100) NOT NULL,
    phone       VARCHAR(20)  NOT NULL,
    email       VARCHAR(100) NOT NULL UNIQUE,
    address     TEXT,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_owners_email       ON owners(email);
CREATE INDEX IF NOT EXISTS idx_owners_created_at  ON owners(created_at);
CREATE INDEX IF NOT EXISTS idx_owners_phone       ON owners(phone);

-----------------------------
-- PATIENTS
-----------------------------
CREATE TABLE IF NOT EXISTS patients (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(100) NOT NULL,
    species     VARCHAR(50)  NOT NULL,
    breed       VARCHAR(100),
    birth_date  DATE,
    weight      DECIMAL(5,2),
    allergies   TEXT,
    owner_id    BIGINT NOT NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- FK mínima para tests
    CONSTRAINT fk_patient_owner
        FOREIGN KEY (owner_id) REFERENCES owners(id)
        ON DELETE RESTRICT,

    -- Validaciones mínimas para tests (coinciden con prod)
    CONSTRAINT chk_valid_species
        CHECK (species IN ('dog','cat')),
    CONSTRAINT chk_positive_weight
        CHECK (weight IS NULL OR weight > 0)
);

CREATE INDEX IF NOT EXISTS idx_patients_owner_id    ON patients(owner_id);
CREATE INDEX IF NOT EXISTS idx_patients_species     ON patients(species);
CREATE INDEX IF NOT EXISTS idx_patients_name        ON patients(name);
CREATE INDEX IF NOT EXISTS idx_patients_created_at  ON patients(created_at);

-----------------------------
-- APPOINTMENTS
-----------------------------
CREATE TABLE IF NOT EXISTS appointments (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id        BIGINT     NOT NULL,
    appointment_date  TIMESTAMP  NOT NULL,
    type              VARCHAR(50) NOT NULL,
    status            VARCHAR(20) NOT NULL DEFAULT 'scheduled',
    priority          VARCHAR(20) NOT NULL DEFAULT 'normal',
    notes             TEXT,
    created_at        TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_appointment_patient
        FOREIGN KEY (patient_id) REFERENCES patients(id)
        ON DELETE CASCADE,

    -- referenciamos la COLUMNA sin comillas
    CONSTRAINT chk_valid_type
        CHECK (type IN ('checkup','vaccination','surgery','grooming','emergency')),
    CONSTRAINT chk_valid_status
        CHECK (status IN ('scheduled','completed','cancelled','no_show')),
    CONSTRAINT chk_valid_priority
        CHECK (priority IN ('low','normal','high','critical'))
);

CREATE INDEX IF NOT EXISTS idx_appointments_patient_id   ON appointments(patient_id);
CREATE INDEX IF NOT EXISTS idx_appointments_date         ON appointments(appointment_date);
CREATE INDEX IF NOT EXISTS idx_appointments_status       ON appointments(status);
CREATE INDEX IF NOT EXISTS idx_appointments_priority     ON appointments(priority);
CREATE INDEX IF NOT EXISTS idx_appointments_date_status  ON appointments(appointment_date, status);


-----------------------------
-- MEDICAL RECORDS
-----------------------------
CREATE TABLE IF NOT EXISTS medical_records (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id       BIGINT        NOT NULL,
    veterinarian_id  BIGINT        NOT NULL,
    visit_date       TIMESTAMP     DEFAULT CURRENT_TIMESTAMP,
    diagnosis        TEXT          NOT NULL,
    treatment        TEXT,
    medications      TEXT,
    notes            TEXT,
    created_at       TIMESTAMP     DEFAULT CURRENT_TIMESTAMP,

    -- FK mínimas para que Hibernate no falle si las mapeas más adelante
    CONSTRAINT fk_medical_patient
        FOREIGN KEY (patient_id) REFERENCES patients(id)
        ON DELETE CASCADE,

    -- Check clave de negocio (H2 soporta LENGTH/TRIM)
    CONSTRAINT chk_diagnosis_not_empty
        CHECK (LENGTH(TRIM(diagnosis)) > 0)
);

CREATE INDEX IF NOT EXISTS idx_medrec_patient_id ON medical_records(patient_id);
CREATE INDEX IF NOT EXISTS idx_medrec_visit_date ON medical_records(visit_date);
